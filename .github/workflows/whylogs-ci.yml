name: python-ci

on:
  pull_request:
  push:
    branches: [develop, main, mainline]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

defaults:
  run:
    working-directory: python

jobs:
  python-ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        python-version: ["3.7", "3.8", "3.9"]
    env:
      CODECOV_UPLOAD: false
      POETRY_VERSION: "1.1.11"
      PYPI_PUBLISH: false
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Set up pre-commit cache
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-pre-commit-
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Test Poetry version
        run: |
          POETRY_VERSION_INSTALLED=$(poetry -V)
          echo "The POETRY_VERSION environment variable is set to $POETRY_VERSION."
          echo "The installed Poetry version is $POETRY_VERSION_INSTALLED."
          case $POETRY_VERSION_INSTALLED in
          *$POETRY_VERSION*) echo "Poetry version correct." ;;
          *) echo "Poetry version incorrect." && exit 1 ;;
          esac
      - name: Install dependencies
        run: make install
      - name: Test virtualenv location
        run: |
          EXPECTED_VIRTUALENV_PATH=${{ github.workspace }}/python/.venv
          INSTALLED_VIRTUALENV_PATH=$(poetry env info --path)
          echo "The virtualenv should be at $EXPECTED_VIRTUALENV_PATH."
          echo "Poetry is using a virtualenv at $INSTALLED_VIRTUALENV_PATH."
          case "$INSTALLED_VIRTUALENV_PATH" in
          "$EXPECTED_VIRTUALENV_PATH") echo "Correct Poetry virtualenv." ;;
          *) echo "Incorrect Poetry virtualenv." && exit 1 ;;
          esac
      - name: Run build, style, and lint checks
        run: make release
      - name: Run pre-commit hooks
        run: make pre-commit
      
      # TODO generate wheel and test
      - name: Smoke test wheel in client environment
        run: |
          python -m venv verify
          source verify/bin/activate
          pip install --upgrade pip
          pip install dist/whylogs*.whl
          python tests/smoketest.py
          deactivate
          rm -rf verify
      
      - name: Upload test coverage report to Codecov
        uses: codecov/codecov-action@v2
        if: env.CODECOV_UPLOAD == 'true'
        with:
          fail_ci_if_error: true
          flags: unit

  docs-ci:
    needs: python-ci

    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.9"]
    env:
      POETRY_VERSION: "1.1.11"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install -E docs
      - name: Run sphinx
        run: |
          make proto -B
          cd docs
          poetry run make html
      
      - name: Publish
        uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: gh-pages
          folder: python/docs/_build/html
        if: ${{ github.ref == 'refs/heads/mainline' }}

