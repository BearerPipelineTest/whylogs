syntax = "proto3";

import "google/protobuf/struct.proto";

option java_package = "com.whylogs.core.message";
option java_outer_classname = "Messages";
option java_multiple_files = true;

message DataType {
  enum Type {
    UNKNOWN = 0;
    NULL = 1;
    FRACTIONAL = 2;
    INTEGRAL = 3;
    BOOLEAN = 4;
    STRING = 5;
  }

  Type type = 1;
}

message HllSketchMessage {
  bytes sketch = 1;
}

message FrequentItemsSketchMessage {
  bytes sketch = 1;
}

message KllSketchMessage {
  bytes sketch = 1;
}

message CpcSketchMessage {
  bytes sketch = 1;
}

message MetricComponentMessage {
  uint32 type_id = 1; // type ID. It might determine how a field gets serder and the aggregation logic

  oneof value {
    // first class citizens
    int64 n = 2;
    double d = 3;
    FrequentItemsSketchMessage frequent_items = 4;
    HllSketchMessage hll = 5;
    KllSketchMessage kll = 6;
    CpcSketchMessage cpc = 7;

    // extension points
    bytes serialized_bytes = 20;
    CustomMetricComponent custom = 15;
  }
}

message CustomMetricComponent {
  string name = 1;
  oneof item {
    google.protobuf.Struct params = 3;
    bytes serialized_bytes = 4;
  }
}

message MetricMessage {
  map<string, MetricComponentMessage> metric_components = 1;
}

message ColumnMessage {
  map<string, MetricComponentMessage> metric_components = 1;
}

message DatasetProperties {
  uint32 schema_major_version = 1;
  uint32 schema_minor_version = 2;

  string session_id = 3;
  int64 session_timestamp = 4;
  int64 data_timestamp = 5;
  map<string, string> tags = 6;
  map<string, string> metadata = 7;
}

message DatasetProfileMessage {
  DatasetProperties properties = 1;
  map<string, ColumnMessage> columns = 2;
  map<string, MetricComponentMessage> metric_components = 3;
}

message ChunkOffsets {
  repeated int32 offsets = 1;
}

message ChunkHeader {
  enum ChunkType {
    DATASET = 0;
    COLUMN = 2;
  }
  ChunkType type = 1;
  string tag = 2;
  uint32 length = 3;
}

message DatasetProfileHeader {
  DatasetProperties properties = 1;
  map<string, ChunkOffsets> column_offsets = 2;
  repeated ChunkOffsets metric_offsets = 3;
}

// [HEADER][len][DATASET MEASURES CHUNK 1][len][DATASET MEASURES CHUNK 2][COLUMN 1][COLUMN1 EXTENSION][COLUMN2]

message CountMessage {
  int64 value = 1;
}
